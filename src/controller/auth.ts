import {Request, Response} from "express"
const bcrypt = require('bcrypt')
const nodemailer = require('nodemailer')
const crypto = require('crypto')
const User = require('../db').models.User
const Token = require('../db').models.Token

const transporter = nodemailer.createTransport({
    host: "smtp.yandex.ru",
    port: 587,
    secure: false,
    auth: {
        user: process.env.EMAIL_LOG,
        pass: process.env.EMAIL_PASS,
    },
})

class Auth {
    mainPage(req: Request, res: Response) {
        res.status(200).json('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    }

    async register(req: Request, res: Response, next: any) {
        try {
            const email = req.body.email
            const password = req.body.password

            const user = await User.findOne({
                where: {
                    email: email
                }
            })

            if (user) {
                res.status(401).json('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            } else {
                bcrypt.hash(password, 10).then(async (hash: string) => {
                    const newUser = await User.create({
                        email: email,
                        password: hash
                    })

                    const token = crypto.randomBytes(20).toString('hex')

                    console.log(token)
                    await Token.create({
                        id: newUser.id,
                        token: token
                    })

                    await transporter.sendMail({
                        from: 'Deimos Corps üëª <dimasamusch@yandex.ru>', // sender address
                        to: email,
                        subject: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", // Subject line
                        html: `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ <a href="http://94.19.156.115:3000/auth/verify/?token=${token}" onMouseOver="window.status=‚Äô—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞‚Äô; return true" onMouseOut="window.status=¬ª; return true">—Å—é–¥–∞</a>`
                    })
                    next()
                })
            }
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ', e)
        }
    }

    async verify(req: Request, res: Response, next: any) {
        const token = req.query.token

        const tokenDb = await Token.findOne({
            where: {
                token: token
            }
        })

        if (tokenDb) {
            const user = await User.findOne({
                where:{
                id: tokenDb.id
                }
            })

            user.verified = true
            user.save()

            tokenDb.destroy()
            res.status(200).json('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
        } else {
            next()
        }
    }

    logout(req: any, res: Response) {
        req.session.destroy(() => {
            res.redirect('/auth')
        })
    }
}

const controller = new Auth()
module.exports = controller